const input = '../.. => ..#/#../.#.\n' +
    '#./.. => #../#../...\n' +
    '##/.. => ###/#.#/#..\n' +
    '.#/#. => ###/##./.#.\n' +
    '##/#. => .../.#./..#\n' +
    '##/## => ##./#.#/###\n' +
    '.../.../... => ##../.#../#.#./....\n' +
    '#../.../... => ..../##.#/...#/##.#\n' +
    '.#./.../... => ###./####/#.../#..#\n' +
    '##./.../... => ###./.##./...#/..##\n' +
    '#.#/.../... => .###/.##./#.../#.##\n' +
    '###/.../... => ##.#/#..#/#.#./#.##\n' +
    '.#./#../... => #.#./.###/#.../#.##\n' +
    '##./#../... => #.../####/#.##/....\n' +
    '..#/#../... => #.##/..#./...#/...#\n' +
    '#.#/#../... => #.##/####/.#.#/#.#.\n' +
    '.##/#../... => #.../##../##.#/.##.\n' +
    '###/#../... => ..../#.#./.###/#...\n' +
    '.../.#./... => .#.#/#..#/##../#.##\n' +
    '#../.#./... => ###./.###/.#.#/..#.\n' +
    '.#./.#./... => ..##/.##./..##/.#.#\n' +
    '##./.#./... => ..#./##../###./...#\n' +
    '#.#/.#./... => ..##/.##./.###/###.\n' +
    '###/.#./... => ..#./.###/###./#.##\n' +
    '.#./##./... => ###./..../.#../#...\n' +
    '##./##./... => .#.#/##../##.#/...#\n' +
    '..#/##./... => ##.#/.##./.###/..##\n' +
    '#.#/##./... => .###/..#./#.##/####\n' +
    '.##/##./... => ##.#/..#./..##/###.\n' +
    '###/##./... => ..../.#.#/.#../#...\n' +
    '.../#.#/... => ###./.#.#/.#../#.##\n' +
    '#../#.#/... => ####/#..#/..../....\n' +
    '.#./#.#/... => #.../..##/#.##/#.#.\n' +
    '##./#.#/... => #.#./###./##../#.#.\n' +
    '#.#/#.#/... => ...#/.##./.##./.#..\n' +
    '###/#.#/... => ..../.##./####/#.#.\n' +
    '.../###/... => .###/.#../.###/#.##\n' +
    '#../###/... => ..##/..##/.##./##..\n' +
    '.#./###/... => .#.#/..#./..##/##.#\n' +
    '##./###/... => ...#/#.##/#.#./##.#\n' +
    '#.#/###/... => #.##/.##./...#/###.\n' +
    '###/###/... => ##../...#/..##/####\n' +
    '..#/.../#.. => #.##/#.../.#../#.#.\n' +
    '#.#/.../#.. => .##./.##./.#.#/.##.\n' +
    '.##/.../#.. => .#.#/#.##/...#/##.#\n' +
    '###/.../#.. => ##../..#./...#/##..\n' +
    '.##/#../#.. => ##../..##/#..#/#..#\n' +
    '###/#../#.. => ##../..#./#.#./....\n' +
    '..#/.#./#.. => .##./##.#/##../####\n' +
    '#.#/.#./#.. => ####/...#/.#.#/..#.\n' +
    '.##/.#./#.. => .#.#/..#./##.#/.#..\n' +
    '###/.#./#.. => #.../#.##/..../##.#\n' +
    '.##/##./#.. => #.#./#.#./#.##/#.#.\n' +
    '###/##./#.. => ...#/###./.##./.#.#\n' +
    '#../..#/#.. => ####/####/..../.##.\n' +
    '.#./..#/#.. => #.##/...#/..#./####\n' +
    '##./..#/#.. => ..#./#.../..##/####\n' +
    '#.#/..#/#.. => #.../#.##/#.##/..##\n' +
    '.##/..#/#.. => ####/..../##../####\n' +
    '###/..#/#.. => ..../##.#/.##./####\n' +
    '#../#.#/#.. => ...#/..##/###./#..#\n' +
    '.#./#.#/#.. => #..#/..#./.###/##.#\n' +
    '##./#.#/#.. => ###./####/#.##/..#.\n' +
    '..#/#.#/#.. => ##../##.#/..##/.##.\n' +
    '#.#/#.#/#.. => .#.#/.##./#.../##.#\n' +
    '.##/#.#/#.. => .#.#/#..#/.##./..#.\n' +
    '###/#.#/#.. => ...#/.#../.##./##.#\n' +
    '#../.##/#.. => ###./##../#.#./####\n' +
    '.#./.##/#.. => .#../##../#.#./.#.#\n' +
    '##./.##/#.. => ##.#/.#../.#.#/####\n' +
    '#.#/.##/#.. => ####/.#.#/..../....\n' +
    '.##/.##/#.. => ####/##../#..#/####\n' +
    '###/.##/#.. => .###/##.#/.#../#.##\n' +
    '#../###/#.. => #..#/###./####/.#.#\n' +
    '.#./###/#.. => ..##/##../##.#/.#.#\n' +
    '##./###/#.. => #..#/.#../####/...#\n' +
    '..#/###/#.. => ##../##.#/...#/#..#\n' +
    '#.#/###/#.. => ..#./.##./#..#/....\n' +
    '.##/###/#.. => #..#/#.../..../.#..\n' +
    '###/###/#.. => ..#./#.##/.##./#...\n' +
    '.#./#.#/.#. => .#.#/.##./##.#/.##.\n' +
    '##./#.#/.#. => #..#/.###/.#.#/.##.\n' +
    '#.#/#.#/.#. => #.../##../#.../.###\n' +
    '###/#.#/.#. => ###./.###/###./....\n' +
    '.#./###/.#. => .#../####/...#/##..\n' +
    '##./###/.#. => ####/###./..../....\n' +
    '#.#/###/.#. => ...#/.###/..../####\n' +
    '###/###/.#. => ..../#.../..#./.###\n' +
    '#.#/..#/##. => #.#./#.../####/#.##\n' +
    '###/..#/##. => .#.#/#..#/.###/#...\n' +
    '.##/#.#/##. => ..##/..#./..../##..\n' +
    '###/#.#/##. => #.#./##.#/####/#..#\n' +
    '#.#/.##/##. => ..../.#../#.#./##.#\n' +
    '###/.##/##. => ..../..../.#../##.#\n' +
    '.##/###/##. => #.#./.###/#.#./#.##\n' +
    '###/###/##. => ##.#/##.#/.###/..#.\n' +
    '#.#/.../#.# => #..#/.#../#.../...#\n' +
    '###/.../#.# => ##../.#../##.#/..#.\n' +
    '###/#../#.# => ..##/#.#./####/.#..\n' +
    '#.#/.#./#.# => ...#/...#/#..#/#.#.\n' +
    '###/.#./#.# => ..../####/.##./.#.#\n' +
    '###/##./#.# => #..#/.#.#/..##/####\n' +
    '#.#/#.#/#.# => #.#./..#./...#/.#..\n' +
    '###/#.#/#.# => ...#/##.#/.###/.#..\n' +
    '#.#/###/#.# => .#.#/###./.#../.##.\n' +
    '###/###/#.# => ...#/.###/.#.#/###.\n' +
    '###/#.#/### => #.##/.#.#/...#/.#..\n' +
    '###/###/### => ..##/.#../#.#./.#..';

const testInput = '../.# => ##./#../...\n' +
    '.#./..#/### => #..#/..../..../#..#';

const lines = input.split('\n');
const keyVals = lines.map(line => line.split(' => '));
const blockUtils = require('./blockUtils');
const map = {};
const _ = require("lodash");

keyVals.forEach(([key, val]) => {
    map[key] = val;
    const arr = blockUtils.stringToArray(key);
    const r1 = blockUtils.rotate(arr);
    const r1FlipH = blockUtils.flipH(r1);
    const r1FlipV = blockUtils.flipV(r1);

    const r2 = blockUtils.rotate(r1);
    const r2FlipH = blockUtils.flipH(r2);
    const r2FlipV = blockUtils.flipV(r2);

    const r3 = blockUtils.rotate(r2);
    const r3FlipH = blockUtils.flipH(r3);
    const r3FlipV = blockUtils.flipV(r3);

    const flipH = blockUtils.flipH(arr);
    const flipV = blockUtils.flipV(arr);

    const r1String = blockUtils.arrayToString(r1);
    const r2String = blockUtils.arrayToString(r2);
    const r3String = blockUtils.arrayToString(r3);
    const flipHString = blockUtils.arrayToString(flipH);
    const flipVString = blockUtils.arrayToString(flipV);

    map[r1String] = val;
    map[r2String] = val;
    map[r3String] = val;
    map[flipHString] = val;
    map[flipVString] = val;

    map[blockUtils.arrayToString(r1FlipH)] = val;
    map[blockUtils.arrayToString(r1FlipV)] = val;

    map[blockUtils.arrayToString(r2FlipH)] = val;
    map[blockUtils.arrayToString(r2FlipV)] = val;

    map[blockUtils.arrayToString(r3FlipH)] = val;
    map[blockUtils.arrayToString(r3FlipV)] = val;

});

module.exports = map;

